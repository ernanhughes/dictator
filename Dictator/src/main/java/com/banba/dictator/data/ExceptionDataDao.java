package com.banba.dictator.data;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table EXCEPTION_DATA.
 */
public class ExceptionDataDao extends AbstractDao<ExceptionData, Long> {

    public static final String TABLENAME = "EXCEPTION_DATA";

    /**
     * Properties of entity ExceptionData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PackageName = new Property(1, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property ExceptionTime = new Property(2, Long.class, "exceptionTime", false, "EXCEPTION_TIME");
        public final static Property ExceptionType = new Property(3, Long.class, "exceptionType", false, "EXCEPTION_TYPE");
        public final static Property ExceptionClassName = new Property(4, String.class, "exceptionClassName", false, "EXCEPTION_CLASS_NAME");
        public final static Property ExceptionMessage = new Property(5, String.class, "exceptionMessage", false, "EXCEPTION_MESSAGE");
        public final static Property StackTrace = new Property(6, String.class, "stackTrace", false, "STACK_TRACE");
        public final static Property ThrowClassName = new Property(7, String.class, "throwClassName", false, "THROW_CLASS_NAME");
        public final static Property ThrowFileName = new Property(8, String.class, "throwFileName", false, "THROW_FILE_NAME");
        public final static Property ThrowLineNumber = new Property(9, String.class, "throwLineNumber", false, "THROW_LINE_NUMBER");
        public final static Property ThrowMethodName = new Property(10, String.class, "throwMethodName", false, "THROW_METHOD_NAME");
    }


    public ExceptionDataDao(DaoConfig config) {
        super(config);
    }

    public ExceptionDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'EXCEPTION_DATA' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'PACKAGE_NAME' TEXT NOT NULL ," + // 1: packageName
                "'EXCEPTION_TIME' INTEGER," + // 2: exceptionTime
                "'EXCEPTION_TYPE' INTEGER," + // 3: exceptionType
                "'EXCEPTION_CLASS_NAME' TEXT," + // 4: exceptionClassName
                "'EXCEPTION_MESSAGE' TEXT," + // 5: exceptionMessage
                "'STACK_TRACE' TEXT," + // 6: stackTrace
                "'THROW_CLASS_NAME' TEXT," + // 7: throwClassName
                "'THROW_FILE_NAME' TEXT," + // 8: throwFileName
                "'THROW_LINE_NUMBER' TEXT," + // 9: throwLineNumber
                "'THROW_METHOD_NAME' TEXT);"); // 10: throwMethodName
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'EXCEPTION_DATA'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, ExceptionData entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPackageName());

        Long exceptionTime = entity.getExceptionTime();
        if (exceptionTime != null) {
            stmt.bindLong(3, exceptionTime);
        }

        Long exceptionType = entity.getExceptionType();
        if (exceptionType != null) {
            stmt.bindLong(4, exceptionType);
        }

        String exceptionClassName = entity.getExceptionClassName();
        if (exceptionClassName != null) {
            stmt.bindString(5, exceptionClassName);
        }

        String exceptionMessage = entity.getExceptionMessage();
        if (exceptionMessage != null) {
            stmt.bindString(6, exceptionMessage);
        }

        String stackTrace = entity.getStackTrace();
        if (stackTrace != null) {
            stmt.bindString(7, stackTrace);
        }

        String throwClassName = entity.getThrowClassName();
        if (throwClassName != null) {
            stmt.bindString(8, throwClassName);
        }

        String throwFileName = entity.getThrowFileName();
        if (throwFileName != null) {
            stmt.bindString(9, throwFileName);
        }

        String throwLineNumber = entity.getThrowLineNumber();
        if (throwLineNumber != null) {
            stmt.bindString(10, throwLineNumber);
        }

        String throwMethodName = entity.getThrowMethodName();
        if (throwMethodName != null) {
            stmt.bindString(11, throwMethodName);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public ExceptionData readEntity(Cursor cursor, int offset) {
        ExceptionData entity = new ExceptionData( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.getString(offset + 1), // packageName
                cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // exceptionTime
                cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // exceptionType
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // exceptionClassName
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // exceptionMessage
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // stackTrace
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // throwClassName
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // throwFileName
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // throwLineNumber
                cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // throwMethodName
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, ExceptionData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPackageName(cursor.getString(offset + 1));
        entity.setExceptionTime(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setExceptionType(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setExceptionClassName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setExceptionMessage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStackTrace(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setThrowClassName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setThrowFileName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setThrowLineNumber(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setThrowMethodName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(ExceptionData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(ExceptionData entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
